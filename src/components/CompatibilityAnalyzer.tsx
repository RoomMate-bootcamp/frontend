import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Loader2, AlertCircle, ThumbsUp, ThumbsDown } from "lucide-react";

// Local compatibility calculation algorithm as fallback
const calculateLocalCompatibility = (currentUser, roommate) => {
  try {
    let score = 50; // Start with a neutral score
    let matches = [];
    let conflicts = [];

    // Check location match
    if (currentUser.location && roommate.location) {
      if (currentUser.location === roommate.location) {
        score += 10;
        matches.push(`–û–±–∞ –∏—â—É—Ç –∂–∏–ª—å–µ –≤ —Ä–∞–π–æ–Ω–µ ${roommate.location}.`);
      } else {
        score -= 5;
        conflicts.push(`–†–∞–∑–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–π–æ–Ω—É: ${currentUser.location} vs ${roommate.location}.`);
      }
    }

    // Check budget match
    if (currentUser.rent_budget && roommate.rent_budget) {
      const budgetDiff = Math.abs(currentUser.rent_budget - roommate.rent_budget);
      const maxBudget = Math.max(currentUser.rent_budget, roommate.rent_budget);
      const budgetDiffPercent = (budgetDiff / maxBudget) * 100;

      if (budgetDiffPercent <= 10) {
        score += 10;
        matches.push(`–°—Ö–æ–∂–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10% —Ä–∞–∑–Ω–∏—Ü—ã.`);
      } else if (budgetDiffPercent <= 20) {
        score += 5;
        matches.push(`–ë–ª–∏–∑–∫–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20%.`);
      } else if (budgetDiffPercent >= 50) {
        score -= 10;
        conflicts.push(`–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –±—é–¥–∂–µ—Ç–µ: ${currentUser.rent_budget}‚ÇΩ vs ${roommate.rent_budget}‚ÇΩ.`);
      }
    }

    // Check cleanliness compatibility
    if (currentUser.cleanliness_level && roommate.cleanliness_level) {
      const cleanDiff = Math.abs(currentUser.cleanliness_level - roommate.cleanliness_level);

      if (cleanDiff === 0) {
        score += 15;
        matches.push(`–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —á–∏—Å—Ç–æ–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (${roommate.cleanliness_level}/5).`);
      } else if (cleanDiff === 1) {
        score += 5;
        matches.push(`–ë–ª–∏–∑–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —á–∏—Å—Ç–æ—Ç—ã.`);
      } else if (cleanDiff >= 3) {
        score -= 15;
        conflicts.push(`–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ —á–∏—Å—Ç–æ—Ç–µ: ${currentUser.cleanliness_level}/5 vs ${roommate.cleanliness_level}/5.`);
      }
    }

    // Check sleep habits
    if (currentUser.sleep_habits && roommate.sleep_habits) {
      const currentSleepType = getSleepType(currentUser.sleep_habits);
      const roommateSleepType = getSleepType(roommate.sleep_habits);

      if (currentSleepType === roommateSleepType) {
        score += 10;
        matches.push(`–°—Ö–æ–∂–∏–π —Ä–µ–∂–∏–º —Å–Ω–∞: ${roommate.sleep_habits}.`);
      } else if (
        (currentSleepType === 'morning' && roommateSleepType === 'night') ||
        (currentSleepType === 'night' && roommateSleepType === 'morning')
      ) {
        score -= 10;
        conflicts.push(`–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Å–Ω–∞: ${currentUser.sleep_habits} vs ${roommate.sleep_habits}.`);
      }
    }

    // Check smoking preferences
    if (currentUser.smoking_preference && roommate.smoking_preference) {
      if (currentUser.smoking_preference === roommate.smoking_preference) {
        score += 10;
        matches.push(`–û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—É—Ä–µ–Ω–∏—é: ${roommate.smoking_preference}.`);
      } else if (
        (currentUser.smoking_preference.includes('–ù–µ –∫—É—Ä—é') && roommate.smoking_preference.includes('–ö—É—Ä—é –¥–æ–º–∞')) ||
        (currentUser.smoking_preference.includes('–ö—É—Ä—é –¥–æ–º–∞') && roommate.smoking_preference.includes('–ù–µ –∫—É—Ä—é'))
      ) {
        score -= 15;
        conflicts.push(`–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫—É—Ä–µ–Ω–∏—è: ${currentUser.smoking_preference} vs ${roommate.smoking_preference}.`);
      }
    }

    // Check pet preferences
    if (currentUser.pet_preference && roommate.pet_preference) {
      if (currentUser.pet_preference === roommate.pet_preference) {
        score += 10;
        matches.push(`–°—Ö–æ–∂–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º: ${roommate.pet_preference}.`);
      } else if (
        (currentUser.pet_preference.includes('–ê–ª–ª–µ—Ä–≥–∏—è') && roommate.pet_preference.includes('–ø–∏—Ç–æ–º–µ—Ü')) ||
        (currentUser.pet_preference.includes('–ø–∏—Ç–æ–º–µ—Ü') && roommate.pet_preference.includes('–ê–ª–ª–µ—Ä–≥–∏—è'))
      ) {
        score -= 20;
        conflicts.push(`–°–µ—Ä—å–µ–∑–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ: —É –æ–¥–Ω–æ–≥–æ –∞–ª–ª–µ—Ä–≥–∏—è, —É –¥—Ä—É–≥–æ–≥–æ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.`);
      }
    }

    // Check interests
    if (currentUser.interests && roommate.interests &&
        Array.isArray(currentUser.interests) && Array.isArray(roommate.interests)) {

      const commonInterests = currentUser.interests.filter(i =>
        roommate.interests.includes(i)
      );

      if (commonInterests.length >= 3) {
        score += 15;
        matches.push(`–ú–Ω–æ–≥–æ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: ${commonInterests.join(', ')}.`);
      } else if (commonInterests.length > 0) {
        score += 5;
        matches.push(`–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: ${commonInterests.join(', ')}.`);
      } else if (currentUser.interests.length > 0 && roommate.interests.length > 0) {
        score -= 5;
        conflicts.push(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.`);
      }
    }

    // Cap score between 0-100
    score = Math.max(0, Math.min(100, score));

    // Generate explanation
    let explanation = `–û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ${score}%\n\n`;

    if (matches.length > 0) {
      explanation += "üìã –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n";
      matches.forEach(match => {
        explanation += `‚Ä¢ ${match}\n`;
      });
      explanation += "\n";
    }

    if (conflicts.length > 0) {
      explanation += "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:\n";
      conflicts.forEach(conflict => {
        explanation += `‚Ä¢ ${conflict}\n`;
      });
      explanation += "\n";
    }

    explanation += "–≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –∂–∏–ª—å—é, –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ –ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.";

    return {
      score: score,
      explanation: explanation,
      matches: matches,
      conflicts: conflicts
    };
  } catch (error) {
    console.error("Error in local compatibility calculation:", error);
    return {
      score: 50,
      explanation: "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
      matches: [],
      conflicts: []
    };
  }
};

// Helper function to categorize sleep habits
const getSleepType = (sleepHabit) => {
  const lowerHabit = sleepHabit.toLowerCase();
  if (lowerHabit.includes('—Ä–∞–Ω–æ') || lowerHabit.includes('–∂–∞–≤–æ—Ä–æ–Ω–æ–∫')) {
    return 'morning';
  } else if (lowerHabit.includes('–ø–æ–∑–¥–Ω–æ') || lowerHabit.includes('—Å–æ–≤–∞')) {
    return 'night';
  } else {
    return 'mixed';
  }
};

// Main component
export default function CompatibilityAnalyzer({ roommate, currentUser, onClose }) {
  const [compatibilityData, setCompatibilityData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [usingFallback, setUsingFallback] = useState(false);

  useEffect(() => {
    if (!roommate || !roommate.id) {
      setError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      setLoading(false);
      return;
    }

    const analyzeCompatibility = async () => {
      try {
        setLoading(true);
        setError(null);
        setUsingFallback(false);

        // Try the API-based compatibility first
        try {
          const response = await fetch(`${import.meta.env.VITE_PUBLIC_BACKEND_URL}/api/v1/ai-matching/${roommate.id}/compatibility`, {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${localStorage.getItem('TOKEN')}`,
              "Cache-Control": "no-cache, no-store, must-revalidate",
              "Pragma": "no-cache"
            },
          });

          // Check if response is OK
          if (response.ok) {
            const data = await response.json();
            setCompatibilityData(data);
            setLoading(false);
            return;
          }

          // If we get here, there was a problem with the API response
          throw new Error("API response issue");
        } catch (apiError) {
          console.warn("API compatibility analysis failed, using fallback algorithm", apiError);
          // Use fallback if API fails
          setUsingFallback(true);
          const localAnalysis = calculateLocalCompatibility(currentUser, roommate);
          setCompatibilityData(localAnalysis);
        }
      } catch (err) {
        console.error("Compatibility analysis error:", err);
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏");
      } finally {
        setLoading(false);
      }
    };

    analyzeCompatibility();
  }, [roommate, currentUser]);

  // Extract insights from explanation
  const extractInsights = (explanation) => {
    if (!explanation) return { matches: [], conflicts: [] };

    // If we're using the fallback, it already provides structured data
    if (usingFallback && compatibilityData) {
      return {
        matches: compatibilityData.matches || [],
        conflicts: compatibilityData.conflicts || []
      };
    }

    // Otherwise try to parse from text
    const matches = [];
    const conflicts = [];

    const paragraphs = explanation.split('\n').filter(p => p.trim().length > 0);

    paragraphs.forEach(paragraph => {
      const lowerPara = paragraph.toLowerCase();

      // Positive indicators
      if (
        lowerPara.includes('—Å–æ–≤–ø–∞–¥') ||
        lowerPara.includes('–ø–æ–¥—Ö–æ–¥') ||
        lowerPara.includes('–æ–±–∞') ||
        lowerPara.includes('—Å—Ö–æ–∂–∏–µ') ||
        lowerPara.includes('–æ–±—â–∏–µ') ||
        lowerPara.includes('–ø–ª—é—Å') ||
        lowerPara.includes('–ø—Ä–µ–∏–º—É—â')
      ) {
        matches.push(paragraph);
      }

      // Negative indicators
      else if (
        lowerPara.includes('—Ä–∞–∑–Ω') ||
        lowerPara.includes('–∫–æ–Ω—Ñ–ª–∏–∫—Ç') ||
        lowerPara.includes('–ø—Ä–æ–±–ª–µ–º') ||
        lowerPara.includes('–≤—ã–∑–æ–≤') ||
        lowerPara.includes('–Ω–µ—Å–æ–≤–º–µ—Å—Ç') ||
        lowerPara.includes('–ø—Ä–æ—Ç–∏–≤') ||
        lowerPara.includes('–º–∏–Ω—É—Å')
      ) {
        conflicts.push(paragraph);
      }
    });

    return { matches, conflicts };
  };

  if (loading) {
    return (
      <Card className="w-full shadow-md">
        <CardContent className="pt-6 flex flex-col items-center justify-center min-h-64">
          <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
          <p className="text-gray-500">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...</p>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="w-full shadow-md">
        <CardContent className="pt-6 flex flex-col items-center justify-center min-h-64">
          <AlertCircle className="h-8 w-8 text-destructive mb-4" />
          <p className="text-destructive">{error}</p>
          <Button onClick={onClose} className="mt-4">
            –í–µ—Ä–Ω—É—Ç—å—Å—è
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!compatibilityData) {
    // Fallback with minimal data
    const basicAnalysis = {
      score: 50,
      explanation: "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.",
    };
    setCompatibilityData(basicAnalysis);
    return null; // Will re-render with the data
  }

  const { matches, conflicts } = extractInsights(compatibilityData.explanation);
  const score = compatibilityData.score;

  return (
    <Card className="w-full shadow-md animate-in">
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          <Badge
            variant={score >= 70 ? "default" : score >= 50 ? "secondary" : "outline"}
            className="text-lg font-bold">
            {Math.round(score)}%
          </Badge>
        </CardTitle>
        <CardDescription>
          {usingFallback && (
            <span className="text-muted-foreground">
              –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            </span>
          )}
          {!usingFallback && (
            <span>
              –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å {roommate.name}
            </span>
          )}
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Compatibility score visualization */}
        <div className="space-y-2">
          <div className="w-full bg-gray-200 rounded-full h-4">
            <div
              className={`${score >= 70 ? 'bg-green-500' : score >= 50 ? 'bg-blue-500' : 'bg-amber-500'} h-4 rounded-full transition-all duration-500 ease-in-out`}
              style={{ width: `${score}%` }}
            ></div>
          </div>

          <div className="flex justify-between text-xs text-gray-500">
            <span>–ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</span>
            <span>–í—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</span>
          </div>
        </div>

        {/* Potential matches section */}
        <div className="space-y-3">
          <h3 className="text-lg font-medium flex items-center gap-2">
            <ThumbsUp className="h-5 w-5 text-green-500" />
            –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          </h3>

          {matches.length > 0 ? (
            <div className="space-y-2">
              {matches.map((match, idx) => (
                <div key={idx} className="bg-green-50 p-3 rounded-md border border-green-100">
                  <p className="text-gray-800">{match}</p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 italic">–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</p>
          )}
        </div>

        {/* Potential conflicts section */}
        <div className="space-y-3">
          <h3 className="text-lg font-medium flex items-center gap-2">
            <ThumbsDown className="h-5 w-5 text-amber-500" />
            –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
          </h3>

          {conflicts.length > 0 ? (
            <div className="space-y-2">
              {conflicts.map((conflict, idx) => (
                <div key={idx} className="bg-amber-50 p-3 rounded-md border border-amber-100">
                  <p className="text-gray-800">{conflict}</p>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 italic">–ó–Ω–∞—á–∏–º—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ</p>
          )}
        </div>

        {/* Full explanation */}
        <div className="pt-4 border-t border-gray-100">
          <h3 className="text-lg font-medium mb-2">–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h3>
          <div className="bg-gray-50 p-4 rounded-lg border border-gray-100">
            <p className="whitespace-pre-wrap">{compatibilityData.explanation}</p>
          </div>
        </div>
      </CardContent>

      <CardFooter className="flex justify-end">
        <Button onClick={onClose}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        </Button>
      </CardFooter>
    </Card>
  );
}